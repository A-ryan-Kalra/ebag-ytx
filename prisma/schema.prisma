// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url  	    = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User{
  id  String    @id @default(cuid()) 
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  username String?
  image         String?
  coverImage String?
  profileImage String?
  hashedPassword String?
  createdAt DateTime @default(now()) 
  category Categories[]
  updatedAt DateTime @updatedAt
  order Orders[]
  address Address[]
  accounts      Account[]
  sessions      Session[]
  orderStatus OrdersStatus[]
}

 model Categories{
 id  String    @id @default(cuid()) 
 name String? 
 user User? @relation(fields: [userId],references: [id],onDelete: Cascade)
 userId String?
 product Products []
 }

model Orders{
  id          String    @id @default(cuid())
  title       String?   @unique
  description String?
  price       Float?
  stock Int?
  quantity Int?
  brand String?
  orderStatus String?
  categories String?
  thumbnail String?
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt
  user User? @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId String? 
  orderItem OrderItem[]
}
model OrdersStatus{
  id          String    @id @default(cuid())
  title       String?   
  description String?
  price       Float?
  stock Int?
  quantity Int?
  brand String?
  orderStatus String?
  categories String?
  thumbnail String?
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt
  user User? @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId String? 
  orderItem OrderItem[]
}

model OrderItem{
id            String    @id @default(cuid())
order Orders? @relation(fields: [orderId],references: [id],onDelete: Cascade)
orderStatus OrdersStatus? @relation(fields: [orderStatusId],references: [id],onDelete: Cascade)
orderId String? 
orderStatusId String?
}

model Address{
id            String    @id @default(cuid())
name String?
address String?
zipcode String?
country String?
createdAt DateTime? @default(now()) 
updatedAt DateTime @updatedAt
user User @relation(fields: [userId],references: [id],onDelete: Cascade)
userId String @unique
}

model Products {
  id          String  @id @default(cuid())
  title       String?
  description String?
  price       Float?
  discountPercentage Float?
  rating Float?
  stock Int?
  brand String?
  url         String?
  thumbnail String?
  images String[]
  created_at  DateTime?  @default(now()) @db.Timestamptz(6)
  category  Categories[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}